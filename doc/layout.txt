The kernel image file has the following format. It conforms to the Linux boot
protocol version 2.4.

  +---------------------------------------+ (file start)-+-
  |              boot sector              |              |
  |            (boot/boot.asm)            |              |
  +---------------------------------------+              | Real mode code
  |           16-bit setup code           |              |
  |            (boot/setup.asm)           |              |
  +---------------------------------------+             -+-
  |           32-bit setup code           |              |
  |           (boot/setup32.asm)          |              |
  +---------------------------------------+              |
  |                                       |              |
  |           microkernel (ELF)           |              | Protected mode
  |                                       |              | kernel
  +---------------------------------------+              |
  |                                       |              |
  |         process manager (ELF)         |              |
  |                                       |              |
  +---------------------------------------+ (file end)  -+-

Once it is loaded in memory by the boot loader and all the setup, startup and
initialization code has run, the layout in memory is as shown below. boot_info
is a data structure located at the beginning of the 32-bit setup code.

  +---------------------------------------+ kernel_vm_top = kernel_region_top + VGA_TEXT_VID_SIZE
  |          VGA text video buffer        |
  |             (maps 0xb8000)            |
  +=======================================+ kernel_region_top
  |                                       |
  |        initial page allocations       |
  |      (1:1 virtual memory mapping)     |
  +=======================================+ boot_info.boot_end  -+-
  |          kernel stack (boot)          |                      |
  +-----v---------------------------v-----+ (stack pointer)      |
  |                                       |                      |
  |                . . .                  |                      |
  |                                       |                      | kernel boot
  +-----^---------------------------^-----+ boot_heap            | stack/heap
  |     kernel heap allocations (boot)    |                      |
  |      kernel physical memory map       |                      |
  +---------------------------------------+ boot_info.boot_heap  |
  |       BIOS physical memory map        |                      |
  +=======================================+ boot_info.image_top -+-
  |                                       | = boot_info.e820_map
  |         process manager (ELF)         |
  |                                       |
  +---------------------------------------+ boot_info.proc_start
  |                                       |
  |           microkernel (ELF)           |
  |                                       |
  +---------------------------------------+ boot_info.kernel_start
  |           32-bit setup code           |
  +---------------------------------------+ boot_info.image_start (KLIMIT + 0x100000)
  
The boot kernel stack is used only during initialization. Once the first thread
context is created, per-thread kernel stacks are used instead.

The whole process address space looks like this:

  +---------------------------------------+ 0x100000000 = 4GB
  |                                       |
  |     available for global mappings     |
  |                                       |
  +---------------------------------------+ kernel_vm_top
  |    microkernel, process manager,etc.  |
  |              (see above)              |  
  +---------------------------------------+ kernel_start (KLIMIT + 0x100000)
  |                                       |
  |     available for global mappings     |
  |                                       |
  +=======================================+ KLIMIT (0xe0000000 = 4GB - 512MB)
  |                                       |
  |                                       |
  |          User memory space            |
  |                                       |
  |                                       |
  |                                       |
  +---------------------------------------+ 0x0

All memory mappings from 0 to KLIMIT are user mappings which belong to the
currently running process. Mappings above KLIMIT are global kernel mappings.

When the 32-bit setup code runs during boot, it enables paging and maps the
first 4MB of physical address space at KLIMIT before passing control to the
kernel. This region of memory includes the loaded kernel image as well as the
VGA text video memory. The kernel initialization code then performs further
intialization, including creating the page tables for the initial process with
the layout indicated above.
