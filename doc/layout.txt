The kernel image has the following format. It conforms to the Linux boot
protocol (version 2.4).

  +---------------------------------------+ (file start)-+-
  |              boot sector              |              |
  |            (boot/boot.asm)            |              |
  +---------------------------------------+              | Real mode code
  |           16-bit setup code           |              |
  |            (boot/setup.asm)           |              |
  +---------------------------------------+             -+-
  |           32-bit setup code           |              |
  |           (boot/setup32.asm)          |              |
  +---------------------------------------+              |
  |                                       |              |
  |           microkernel (ELF)           |              | Protected mode
  |                                       |              | kernel
  +---------------------------------------+              |
  |                                       |              |
  |         process manager (ELF)         |              |
  |                                       |              |
  +---------------------------------------+ (file end)  -+-


Once it is loaded in memory by the boot loader and all the setup, startup and
initialization code has run, the layout in memory is as shown below. boot_info
is a data structure located at the beginning of the 32-bit setup code.

  +---------------------------------------+ kernel_region_top
  |                                       |
  |        initial page allocations       |
  |      (1:1 virtual memory mapping)     |
  +=======================================+ boot_info.boot_end  -+-
  |          kernel stack (boot)          |                      |
  +-----v---------------------------v-----+ (stack pointer)      |
  |                                       |                      |
  |                . . .                  |                      |
  |                                       |                      | kernel boot
  +-----^---------------------------^-----+ boot_heap            | stack/heap
  |     kernel heap allocations (boot)    |                      |
  |      kernel physical memory map       |                      |
  +---------------------------------------+ boot_info.boot_heap  |
  |       BIOS physical memory map        |                      |
  +=======================================+ boot_info.image_top -+-
  |                                       | = boot_info.e820_map
  |         process manager (ELF)         |
  |                                       |
  +---------------------------------------+ boot_info.proc_start
  |                                       |
  |           microkernel (ELF)           |
  |                                       |
  +---------------------------------------+ boot_info.kernel_start
  |           32-bit setup code           |
  +---------------------------------------+ boot_info.image_start (0x100000)
  
The boot kernel stack is used only during initialization. Once the first thread
context is created, per-thread kernel stacks are used instead.


The whole process address space looks like this:

  +---------------------------------------+ 0x100000000 = 4GB
  |                                       |
  |          User memory space            |
  |                                       |
  |                                       |
  |                                       |
  +=======================================+ KLIMIT (0x8000000 = 128MB)
  |                                       |
  |     available for global mappings     |
  |                                       |
  +---------------------------------------+ kernel_region_top
  |    microkernel, process manager,etc.  |
  |              (see above)              |  
  +---------------------------------------+ kernel_start (0x100000 = 1MB)
  |                                       |
  |     available for global mappings     |
  |                                       |
  +---------------------------------------+ 0x0

All memory mappings from 0 to KLIMIT are global kernel mappings. Mappings above
KLIMIT are user mappings which belong to the currently running process.

The first page is permanently unmapped to ensure NULL pointer dereferences are
detected.
